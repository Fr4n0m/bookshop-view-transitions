---
import Footer from '../components/Footer.astro'

interface Props {
	title: string
}

const { title } = Astro.props
---

<!DOCTYPE html>
<html lang='es'>
	<head>
		<meta charset='UTF-8' />
		<meta name='description' content='Astro description' />
		<meta name='viewport' content='width=device-width' />
		<link rel='icon' type='image/svg+xml' href='/favicon.svg' />
		<link rel='stylesheet' href='/src/styles/main.css' />
		<meta name='view-transition' content='same-origin' />
		<meta name='generator' content={Astro.generator} />
		<title>{title}</title>
	</head>

	<body class='mb-20'>
		<slot />

		<Footer />

		<img src='images/got-1.webp' />

		<style is:global>
			:root {
				--accent: 124, 58, 237;
				--accent-gradient: linear-gradient(45deg, rgb(var(--accent)), #da62c4 30%, white 60%);
			}
			html {
				font-family: system-ui, sans-serif;
				background-color: #f6f6f6;
			}
			code {
				font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
					Bitstream Vera Sans Mono, Courier New, monospace;
			}

			@keyframes fade-in {
				from {
					opacity: 0;
				}
			}
		</style>
	</body>
</html>

<script>
	let scrollPosition = 0

	// Guardar la posición del scroll antes de navegar
	window.addEventListener('beforeunload', () => {
		scrollPosition = window.scrollY
	})

	async function fetchAndReplaceContent(toUrl) {
		const response = await fetch(toUrl.pathname)
		const text = await response.text()

		const parser = new DOMParser()
		const doc = parser.parseFromString(text, 'text/html')

		// Extraer el contenido del nuevo body
		const newBodyContent = doc.body.innerHTML

		return newBodyContent
	}

	if (document.startViewTransition) {
		window.navigation.addEventListener('navigate', (event) => {
			const toUrl = new URL(event.destination.url)

			// Ignorar si es una página externa
			if (location.origin !== toUrl.origin) return

			// Interceptar la navegación
			event.intercept({
				async handler() {
					try {
						const newBodyContent = await fetchAndReplaceContent(toUrl)

						// Iniciar la transición de vista
						document.startViewTransition(() => {
							document.body.innerHTML = newBodyContent

							// Restaurar la posición del scroll
							document.documentElement.scrollTop = scrollPosition
						})
					} catch (error) {
						console.error('Error en la transición de vista: ', error)
					}
				}
			})
		})
	}

	// Al cargar la página, restaurar la posición del scroll si existe
	document.addEventListener('DOMContentLoaded', () => {
		document.documentElement.scrollTop = scrollPosition
	})
</script>
